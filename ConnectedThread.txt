//package com.example.eren.bluetooth;
//
//import android.bluetooth.BluetoothSocket;
//import android.os.Bundle;
//import android.os.Handler;
//import android.os.Message;
//import android.util.Log;
//
//import java.io.IOException;
//import java.io.OutputStream;
//
//
//public class ConnectedThread extends Thread {
//    private final BluetoothSocket mmSocket;
//    private final OutputStream mmOutStream;
//    private byte[] mmBuffer; // mmBuffer store for the stream
//    private String TAG = "Eren-ConnectedThread";
//    private Handler mHandler;
//
//    private interface MessageConstants {
//        public static final int MESSAGE_READ = 0;
//        public static final int MESSAGE_WRITE = 1;
//        public static final int MESSAGE_TOAST = 2;
//
//        // ... (Add other message types here as needed.)
//    }
//
//    public ConnectedThread(BluetoothSocket socket) {
//        mmSocket = socket;
//        OutputStream tmpOut = null;
//
//        // Get the input and output streams; using temp objects because
//        // member streams are final.
//
//        try {
//            tmpOut = socket.getOutputStream();
//        } catch (IOException e) {
//            Log.e(TAG, "Error occurred when creating output stream", e);
//        }
//
//        mmOutStream = tmpOut;
//    }
//
//
//    // Call this from the main activity to send data to the remote device.
//    public void write(byte[] bytes) {
//        try {
//            mmOutStream.write(bytes);
//
//            // Share the sent message with the UI activity.
//            Log.d(TAG, "Sent message to outstream: " + bytes);
//            Message writtenMsg = mHandler.obtainMessage(
//                    MessageConstants.MESSAGE_WRITE, -1, -1, mmBuffer);
//            writtenMsg.sendToTarget();
//        } catch (IOException e) {
//            Log.e(TAG, "Error occurred when sending data", e);
//
//            // Send a failure message back to the activity.
//            Message writeErrorMsg =
//                    mHandler.obtainMessage(MessageConstants.MESSAGE_TOAST);
//            Bundle bundle = new Bundle();
//            bundle.putString("toast",
//                    "Couldn't send data to the other device");
//            writeErrorMsg.setData(bundle);
//            mHandler.sendMessage(writeErrorMsg);
//        }
//    }
//
//    // Call this method from the main activity to shut down the connection.
//    public void cancel() {
//        try {
//            mmSocket.close();
//        } catch (IOException e) {
//            Log.e(TAG, "Could not close the connect socket", e);
//        }
//    }
//}
//
